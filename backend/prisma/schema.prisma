// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  firstName String?
  lastName  String?
  articles  Article[]
  credential Credential?
  createdAt DateTime @default(now())
}

model Credential {
  id        String   @id @default(uuid())
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
}

model Article {
  id        String   @id @default(uuid())
  title     String
  content   Json     // Structured content blocks
  excerpt   String?
  slug      String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  assets    Asset[]  // All assets used in this article
  tags      ArticleTag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Asset {
  id          String   @id @default(uuid())
  filename    String
  originalName String
  url         String
  type        AssetType
  mimeType    String
  size        Int
  width       Int?     
  height      Int?     
  articleId   String?
  article     Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  
  @@index([articleId])
}

enum AssetType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

model Tag {
  id          String       @id @default(uuid())
  name        String       @unique
  slug        String       @unique
  description String?
  color       String?
  articles    ArticleTag[]
  createdAt   DateTime     @default(now())
}

model ArticleTag {
  articleId String
  tagId     String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([articleId, tagId])
}

